-- @path EMF=/beautyocl.catalogue.emfocl/metamodels/OCLEcore.ecore
-- @path EMF=/beautyocl.catalogue.emfocl/metamodels/OCLEcore.ecore
-- -- @path ACT=/beautyocl.actions/model/actions.ecore
module simplify_booleans;
create OUT : ACT, OUT2 : EMF from IN : EMF;

helper context EMF!IteratorExp def: iteratorVar : OclAny = self.iterators->first();

helper context EMF!OperationCallExp def: argument : OclAny = self.refInvokeOperation('getArgument', Sequence { })->first();

helper context EMF!OperationCallExp def: name : OclAny = self.referredOperation.name;

helper context EMF!OperationCallExp def: name : OclAny = self.referredOperation.name;

helper context EMF!OperationCallExp def: name : OclAny = self.referredOperation.name;

helper context EMF!OperationCallExp def: arguments : OclAny = self.refInvokeOperation('getArgument', Sequence { });

helper context EMF!VariableExp def: varDcl : OclAny = self.referredVariable;

helper  def: relationalOps : Set(String) = Set {'=', '<>', 'implies', 'and', 'or', 'xor' };

rule binaryBooleanRelational {
   from o : EMF!OperationCallExp( o.source.oclIsKindOf(EMF!BooleanLiteralExp) and o.argument.oclIsKindOf(EMF!BooleanLiteralExp) and thisModule.relationalOps->includes(o.name) and o.BinaryOperatorCallExp__filter__ )
     to a : ACT!Replace, r : EMF!BooleanLiteralExp (
			booleanSymbol <- if o.name = 'implies' then
				o.source.booleanSymbol implies o.argument.booleanSymbol
			else
				if o.name = '<>' then
				o.source.booleanSymbol <> o.argument.booleanSymbol
			else
				if o.name = 'and' then
				o.source.booleanSymbol and o.argument.booleanSymbol
			else
				if o.name = 'or' then
				o.source.booleanSymbol or o.argument.booleanSymbol
			else
				if o.name = 'xor' then
				o.source.booleanSymbol xor o.argument.booleanSymbol
			else
				o.source.booleanSymbol = o.argument.booleanSymbol
			endif
			endif
			endif
			endif
			endif
		)
do {
   a.source <- o;
   a.target <- r;
}
}

rule unaryBoolean {
   from o : EMF!OperationCallExp( o.source.oclIsKindOf(EMF!BooleanLiteralExp) and o.name = 'not' and o.UnaryOperatorCallExp__filter__ )
     to a : ACT!Replace, r : EMF!BooleanLiteralExp (
				booleanSymbol <- not o.source.booleanSymbol
			)
do {
   a.source <- o;
   a.target <- r;
}
}

helper context EMF!OperationCallExp def: BinaryOperatorCallExp__filter__ : OclAny = self.arguments->notEmpty();

helper context EMF!OperationCallExp def: UnaryOperatorCallExp__filter__ : OclAny = self.arguments->isEmpty();

