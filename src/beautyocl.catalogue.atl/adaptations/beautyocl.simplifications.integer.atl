-- -- @path ATL=/beautyocl.catalogue.atl/metamodels/ATLStatic.ecore
module simplify;
create OUT : ATL refining IN : ATL;

helper context ATL!OperatorCallExp def: argument : OclAny = self.arguments->first();

helper  def: relationalOps : Set(String) = Set {'<', '<=', '>', '>=', '=' };

helper  def: arithmeticOps : Set(String) = Set {'+', '-', '*', '/' };

rule binaryIntegerRelational {
   from o : ATL!OperatorCallExp( o.source.oclIsKindOf(ATL!IntegerExp) and o.argument.oclIsKindOf(ATL!IntegerExp) and thisModule.relationalOps->includes(o.name) and o.BinaryOperatorCallExp__filter__ )
     to r : ATL!BooleanExp (
		booleanSymbol <- if ( o.name = '<' ) then
			o.source.integerSymbol < o.argument.integerSymbol
		else
			if ( o.name = '<=' ) then
			o.source.integerSymbol <= o.argument.integerSymbol
		else
			if ( o.name = '>' ) then
			o.source.integerSymbol > o.argument.integerSymbol
		else
			if ( o.name = '>=' ) then
			o.source.integerSymbol >= o.argument.integerSymbol
		else
			o.source.integerSymbol = o.argument.integerSymbol
		endif
		endif
		endif
		endif
	)

}

rule binaryIntegerArithmetic {
   from o : ATL!OperatorCallExp( o.source.oclIsKindOf(ATL!IntegerExp) and o.argument.oclIsKindOf(ATL!IntegerExp) and thisModule.arithmeticOps->includes(o.name) and o.BinaryOperatorCallExp__filter__ )
     to r : ATL!BooleanExp (
		booleanSymbol <- if ( o.name = '+' ) then
			o.source.integerSymbol + o.argument.integerSymbol
		else
			if ( o.name = '-' ) then
			o.source.integerSymbol - o.argument.integerSymbol
		else
			if ( o.name = '*' ) then
			o.source.integerSymbol * o.argument.integerSymbol
		else
			o.source.integerSymbol / o.argument.integerSymbol
		endif
		endif
		endif
	)

}

helper context ATL!OperatorCallExp def: BinaryOperatorCallExp__filter__ : OclAny = self.arguments.size()->notEmpty();

helper context ATL!OperatorCallExp def: UnaryOperatorCallExp__filter__ : OclAny = self.arguments.size()->isEmpty();

