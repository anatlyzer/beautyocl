-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- -- @path ACT=/beautyocl.actions/model/actions.ecore
-- --
-- -- if condition then 
-- --   true
-- -- else
-- --   false
-- -- endif        ==> condition 
-- --
module if_true_false;
create OUT : ACT, OUT2 : ATL from IN : ATL;

helper context ATL!IteratorExp def: iteratorVar : OclAny = self.iterators->first();

helper context ATL!OperatorCallExp def: argument : OclAny = self.arguments->first();

helper context ATL!Iterator def: name : OclAny = self.varName;

helper context ATL!VariableExp def: varDcl : OclAny = self.referredVariable;

helper context ATL!CollectionOperationCallExp def: name : OclAny = self.operationName;

helper context ATL!OperatorCallExp def: name : OclAny = self.operationName;

helper context ATL!OperationCallExp def: name : OclAny = self.operationName;

helper context ATL!BooleanExp def: isBooleanExpr(b : Boolean) : Boolean = self.booleanSymbol = b;

helper context ATL!OclExpression def: isBooleanExpr(b : Boolean) : Boolean = false;

rule replaceByCondition {
   from o : ATL!IfExp( o.thenExpression.isBooleanExpr(true) and o.elseExpression.isBooleanExpr(false) )
     to a : ACT!DeleteMoveChildren
do {
   a.source <- o;
   a.children <- o.condition;
}
}

rule replaceByNegatedCondition {
   from o : ATL!IfExp( o.thenExpression.isBooleanExpr(false) and o.elseExpression.isBooleanExpr(true) )
     to a : ACT!Replace, r : ATL!OperatorCallExp (
			operationName <- 'not'
		)
do {
   a.source <- o;
   r.source <- o.condition;
   a.target <- o.condition;
}
}

helper context ATL!OperatorCallExp def: BinaryOperatorCallExp__filter__ : OclAny = self.arguments->notEmpty();

helper context ATL!OperatorCallExp def: UnaryOperatorCallExp__filter__ : OclAny = self.arguments->isEmpty();

