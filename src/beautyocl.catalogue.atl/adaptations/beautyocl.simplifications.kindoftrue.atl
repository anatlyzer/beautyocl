-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore
-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- @path WRAP=/beautyocl.catalogue.atl/metamodels/typing_wrapper.ecore
-- -- @path ACT=/beautyocl.actions/model/actions.ecore
-- -- @Xpre OCL!OperationCallExp.allInstances()->forAll(op | op.name = 'oclIsKindOf' implies self.arguments->size() = 1 )
module simplify_kindof_true;
create OUT : ACT, OUT2 : ATL from IN : ATL, IN2 : WRAP, IN_ECORE : ECORE;

helper context ECORE!EClass def: allSuperClasses : OclAny = self.eAllSuperTypes;

helper context ECORE!EClass def: superClasses : OclAny = self.eSuperTypes;

helper context ATL!IteratorExp def: iteratorVar : OclAny = self.iterators->first();

helper context ATL!OperatorCallExp def: argument : OclAny = self.arguments->first();

helper context ATL!Iterator def: name : OclAny = self.varName;

helper context ATL!VariableExp def: varDcl : OclAny = self.referredVariable;

helper context ATL!CollectionOperationCallExp def: name : OclAny = self.operationName;

helper context ATL!OperatorCallExp def: name : OclAny = self.operationName;

helper context ATL!OperationCallExp def: name : OclAny = self.operationName;

helper  def: typ : WRAP!TypWrapper = WRAP!TypWrapper.allInstances()->first();

helper context ATL!OclExpression def: isKindOf() : Boolean = false;

-- -- @ignore undefined-value
helper context ATL!OperationCallExp def: isKindOf() : Boolean = if self.name = 'oclIsKindOf' then
	thisModule.typ.isSameType(self.source, self.arguments->first()) or thisModule.typ.isSuperType(self.source, self.arguments->first())
else
	false
endif;

rule toTrue {
   from o : ATL!OperationCallExp( o.isKindOf() )
     to a : ACT!Replace, r : ATL!BooleanExp (
			booleanSymbol <- true
		)
do {
   a.source <- o;
   a.target <- r;
}
}

helper context ATL!OperatorCallExp def: BinaryOperatorCallExp__filter__ : OclAny = self.arguments->notEmpty();

helper context ATL!OperatorCallExp def: UnaryOperatorCallExp__filter__ : OclAny = self.arguments->isEmpty();

