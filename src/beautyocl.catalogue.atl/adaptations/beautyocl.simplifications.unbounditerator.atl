-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore
-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- -- @path ACT=/beautyocl.actions/model/actions.ecore
-- @path CWRAP=/beautyocl.catalogue.atl/metamodels/comparison_wrapper.ecore
-- @path WRAP=/beautyocl.catalogue.atl/metamodels/typing_wrapper.ecore
-- -- 
-- -- XML!Element.allInstances()->forAll(i | XML!Element.allInstances()->forAll(d | not i.parent.oclIsUndefined()));
-- -- 
-- -- => 
-- --
-- -- XML!Element.allInstances()->forAll(i | not i.parent.oclIsUndefined());
-- --
-- -- because d is not referred to in the body of the forAll
module unbounditerator;
create OUT : ACT, OUT2 : ATL from IN : ATL, IN2 : WRAP, IN3 : CWRAP, IN_ECORE : ECORE;

helper context ECORE!EClass def: allSuperClasses : OclAny = self.eAllSuperTypes;

helper context ECORE!EClass def: superClasses : OclAny = self.eSuperTypes;

helper context ATL!IteratorExp def: iteratorVar : OclAny = self.iterators->first();

helper context ATL!OperatorCallExp def: argument : OclAny = self.arguments->first();

helper context ATL!Iterator def: name : OclAny = self.varName;

helper context ATL!VariableExp def: varDcl : OclAny = self.referredVariable;

helper context ATL!CollectionOperationCallExp def: name : OclAny = self.operationName;

helper context ATL!OperatorCallExp def: name : OclAny = self.operationName;

helper context ATL!OperationCallExp def: name : OclAny = self.operationName;

helper  def: comp : CWRAP!ComparisonWrapper = CWRAP!ComparisonWrapper.allInstances()->first();

helper  def: typ : WRAP!TypWrapper = WRAP!TypWrapper.allInstances()->first();

helper context OclAny def: oclAsType(t : ATL!"OclType") : OclAny = self;

helper context ATL!OclExpression def: isSimpleExpression() : Boolean = true;

helper context ATL!OperationCallExp def: isSimpleExpression() : Boolean = not self.arguments->exists(a | a.oclIsKindOf(ATL!IfExp));

helper context ATL!OperatorCallExp def: isSimpleExpression() : Boolean = not ( self.source.oclIsKindOf(ATL!IfExp) or self.arguments.oclIsKindOf(ATL!IfExp) );

-- -- @lib find-ocurrences
helper context ATL!OclExpression def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = Set { };

helper context ATL!VariableExp def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = if self.varDcl = v then
	Set {self }
else
	Set { }
endif;

helper context ATL!PropertyCallExp def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = self.source.findOcurrences(v);

helper context ATL!NavigationOrAttributeCallExp def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = self.source.findOcurrences(v);

helper context ATL!OperationCallExp def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = self.source.findOcurrences(v)->union(self.arguments->collect(a | a.findOcurrences(v)))->flatten();

helper context ATL!OperatorCallExp def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = self.source.findOcurrences(v)->union(self.arguments->collect(a | a.findOcurrences(v)))->flatten();

helper context ATL!IfExp def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = self.condition.findOcurrences(v)->union(self.thenExpression.findOcurrences(v))->union(self.elseExpression.findOcurrences(v))->flatten();

helper context ATL!IteratorExp def: findOcurrences(v : ATL!VariableDeclaration) : Set(ATL!VariableExp) = self.source.findOcurrences(v)->union(self.body.findOcurrences(v))->flatten();

rule unboundIterator {
   from i : ATL!IteratorExp( if Set {'forAll', 'exists' }->includes(i.name) then
	i.body.findOcurrences(i.iteratorVar)->isEmpty()
else
	false
endif )
     to mov : ACT!DeleteMoveChildren
do {
   mov.source <- i;
   mov.children <- i.body;
}
}

helper context ATL!OperatorCallExp def: BinaryOperatorCallExp__filter__ : OclAny = self.arguments->notEmpty();

helper context ATL!OperatorCallExp def: UnaryOperatorCallExp__filter__ : OclAny = self.arguments->isEmpty();

