-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- -- @path ACT=/beautyocl.actions/model/actions.ecore
-- @path CWRAP=/beautyocl.catalogue.atl/metamodels/comparison_wrapper.ecore
-- --
-- -- EXP AND EXP ==> EXP
-- --
module remove_operand;
create OUT : ACT, OUT2 : ATL from IN : ATL, IN3 : CWRAP;

helper context ATL!IteratorExp def: iteratorVar : OclAny = self.iterators->first();

helper context ATL!OperatorCallExp def: argument : OclAny = self.arguments->first();

helper context ATL!Iterator def: name : OclAny = self.varName;

helper context ATL!VariableExp def: varDcl : OclAny = self.referredVariable;

helper context ATL!CollectionOperationCallExp def: name : OclAny = self.operationName;

helper context ATL!OperatorCallExp def: name : OclAny = self.operationName;

helper context ATL!OperationCallExp def: name : OclAny = self.operationName;

helper  def: comp : CWRAP!ComparisonWrapper = CWRAP!ComparisonWrapper.allInstances()->first();

rule removeOperand {
   from i : ATL!OperatorCallExp( if i.name = 'and' or i.name = 'or' then
	thisModule.comp.isSameExpr(i.source, i.arguments->first())
else
	false
endif )
     to a : ACT!DeleteMoveChildren
do {
   a.source <- i;
   a.children <- i.source;
}
}

helper context ATL!OperatorCallExp def: BinaryOperatorCallExp__filter__ : OclAny = self.arguments->notEmpty();

helper context ATL!OperatorCallExp def: UnaryOperatorCallExp__filter__ : OclAny = self.arguments->isEmpty();

