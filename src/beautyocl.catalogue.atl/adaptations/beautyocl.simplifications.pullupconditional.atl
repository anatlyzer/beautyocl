-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- @path ATL=/beautyocl.catalogue.atl/metamodels/merged.ecore
-- -- @path ACT=/beautyocl.actions/model/actions.ecore
-- --
-- -- @category idiomatic
-- --
-- -- Given:
-- --    col->select(if X then true else Y)
-- --    col->select(X)->select(Y)
-- -- or
-- --    col->reject(if X then true else EXP) with
-- --    col->reject(X)->reject(EXP)
module pull_up_conditional;
create OUT : ACT, OUT2 : ATL from IN : ATL;

helper context ATL!IteratorExp def: iteratorVar : OclAny = self.iterators->first();

helper context ATL!OperatorCallExp def: argument : OclAny = self.arguments->first();

helper context ATL!Iterator def: name : OclAny = self.varName;

helper context ATL!VariableExp def: varDcl : OclAny = self.referredVariable;

helper context ATL!CollectionOperationCallExp def: name : OclAny = self.operationName;

helper context ATL!OperatorCallExp def: name : OclAny = self.operationName;

helper context ATL!OperationCallExp def: name : OclAny = self.operationName;

helper context ATL!BooleanExp def: isTrue() : Boolean = self.booleanSymbol;

helper context ATL!OclExpression def: isTrue() : Boolean = false;

helper context ATL!OclExpression def: isConditionalTrueBranch() : Boolean = false;

helper context ATL!IfExp def: isConditionalTrueBranch() : Boolean = self.thenExpression.isTrue();

rule matchSelectReject {
   from o : ATL!IteratorExp( if o.name = 'select' or o.name = 'reject' then
								o.body.isConditionalTrueBranch()
							else
								false
							endif )
     to c : ACT!CompositeAction (
		actions <- Sequence {select_body, set_body, change_body, set_source, change_source }
	), iteratorExp : ATL!IteratorExp (
			name <- o.name,
			iterators <- iterator
		), iterator : ATL!Iterator (
				varName <- o.iteratorVar.name
			), set_body : ACT!SetP (
					propertyName <- 'body'
				), change_body : ACT!SetP (
						propertyName <- 'body'
					), set_source : ACT!SetP (
							propertyName <- 'source'
						), change_source : ACT!SetP (
								propertyName <- 'source'
							), select_body : ACT!Clone
do {
   set_body.source <- iteratorExp;
   set_body.value <- select_body;
   change_body.source <- o;
   change_body.value <- o.body.elseExpression;
   set_source.source <- iteratorExp;
   set_source.value <- o.source;
   change_source.source <- o;
   change_source.value <- iteratorExp;
   select_body.source <- o.body.condition;
   select_body.replaceReferenceTo <- Sequence {o.iteratorVar };
   select_body.withReplacement <- Sequence {iterator };
   c.source <- o;
}
}

helper context ATL!OperatorCallExp def: BinaryOperatorCallExp__filter__ : OclAny = self.arguments->notEmpty();

helper context ATL!OperatorCallExp def: UnaryOperatorCallExp__filter__ : OclAny = self.arguments->isEmpty();

