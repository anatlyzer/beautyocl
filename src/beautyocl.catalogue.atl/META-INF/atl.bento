composite component beautyocl.atl {
	// uses "bento:/beautyocl.simplifications.integer"
	
	// Literals
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_integers.bento"
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_booleans.bento"
	// Type comparisons
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplify_full_type_comparison.bento"
	
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_kindof_true.bento"
	
	// Iterators
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_remove_iterator.bento"
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_unbound_iterator.bento"
	// If	                          	
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_if_else.bento"
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_if_introduce_call.bento"
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_if_same_expr.bento"
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_if_fusion.bento"
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_if_true_false.bento"
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_pull_up_conditional.bento"

	// Unshort-circuiting	                          
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_unshort_circuit.bento"	

	// Let	                          
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_remove_let.bento"	
	                         
	// Operators	                         
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_same_operand.bento"	
	uses "platform:/resource/beautyocl.catalogue.simplifications/META-INF/simplification_equality_sequence.bento"	
	                          
	binding bindTyping    = "typing2atl.gbind"
	binding bindComparison= "comparison2atl.gbind"
	binding bindAll    = "superimposed2atl.gbind"
	binding bindAllTgt    = "superimposed2atl_tgt.gbind"
			
	source concept ATLs : "ATLStatic.ecore"
	source concept TYPW : "typing_wrapper.ecore"
	source concept COMPW: "comparison_wrapper.ecore"	
	target concept ATLt : "ATLStatic.ecore"
	target concept ACT : "platform:/resource/beautyocl.actions/model/actions.ecore"
	
	source model in  : ATLs
	source model in2  : TYPW  
	source model in3  : COMPW
	target model out : ATLt
	target model act : ACT
	
	compose seq  
		apply booleans(bindAll(in)) -> (act, bindAllTgt(out))
		apply integers(bindAll(in)) -> (act, bindAllTgt(out))
		apply iterator(bindAll(in)) -> (act, bindAllTgt(out))
		apply unbounditerator(bindAll(in), bindTyping(in2),  bindComparison(in3)) -> (act, bindAllTgt(out))
		apply ifelse(bindAll(in)) -> (act, bindAllTgt(out))
		apply iftruefalse(bindAll(in)) -> (act, bindAllTgt(out))		
		apply ifintrocall(bindAll(in)) -> (act, bindAllTgt(out))
		apply ifsameexpr(bindAll(in), bindComparison(in3)) -> (act, bindAllTgt(out))
		apply iffusion(bindAll(in), bindComparison(in3)) -> (act, bindAllTgt(out))
		apply pullupconditional(bindAll(in)) -> (act, bindAllTgt(out))
				
		apply kindoftrue(bindAll(in), bindTyping(in2)) -> (act, bindAllTgt(out))
		
		// apply ifKindOf(bindKindOf(in), bindTyping(in2)) -> (act)
		apply fullTypeComparison(bindAll(in), bindTyping(in2)) -> (act, bindAllTgt(out))
		// apply fullTypeComparison(in, bindTyping(in2)) -> (act, out)
		
		apply unshortcircuit(bindAll(in), bindTyping(in2),  bindComparison(in3)) -> (act, bindAllTgt(out))
		
		apply removelet(bindAll(in), bindTyping(in2),  bindComparison(in3)) -> (act, bindAllTgt(out))

		apply sameoperand(bindAll(in), bindComparison(in3)) -> (act, bindAllTgt(out))
		apply equalitysequence(bindAll(in), bindComparison(in3)) -> (act, bindAllTgt(out))
}

