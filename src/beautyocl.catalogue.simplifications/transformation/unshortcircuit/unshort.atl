
-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCLt=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore
-- @path COMP=/beautyocl.catalogue.simplifications/metamodels/comparison.ecore
-- @path TYP=/beautyocl.catalogue.simplifications/metamodels/typing.ecore

module "unshort";
create OUT : ACT, OUT2 : OCLt from IN : OCL, IN2 : TYP, IN3 : COMP; 

helper def : comp : COMP!ExprComparator = COMP!ExprComparator.allInstances()->first();
helper def : typ  : TYP!ExprTyping = TYP!ExprTyping.allInstances()->first();

helper context OclAny def: oclAsType(t : OCL!"OclType") : OclAny = self;

helper context OCL!BooleanExp    def: isBooleanExpr(b : Boolean) : Boolean = self.booleanSymbol = b;
helper context OCL!OclExpression def: isBooleanExpr(b : Boolean) : Boolean = false;

-- CHECK FOR <> OclUndefined
helper context OCL!OclExpression def: hasShortThing() : Boolean = false;
helper context OCL!PropertyCallExp def: hasShortThing() : Boolean = self.source.hasShortThing();
helper context OCL!OperationCallExp def: hasShortThing() : Boolean = 
	if self.name = 'oclIsKindOf' or self.name = 'oclIsUndefined' then
		true
	else
		self.source.hasShortThing()
	endif;


helper context OCL!OclExpression def: kindOfType() : TupleType(source : OCL!OclExpression, type : TYP!CClass) =
	if self.oclIsKindOf(OCL!OperationCallExp) then
		if self.name = 'oclIsKindOf' then -- TODO: Check typeOf
			-- let t : TYP!CClass = thisModule.typ.typeOf(self.arguments->first()).oclAsType(TYP!CClass)
			let t : TYP!CClass = thisModule.typ.typeOf(self.source).oclAsType(TYP!CClass)
			in 
				if t <> OclUndefined then
					Tuple { source = self.source, type = t }
				else
					OclUndefined
				endif
		else 
			OclUndefined	
		endif
	else
		OclUndefined
	endif;

-- Computes all ocurrences of a given sub-expr in the current expression, and for each of these
-- subexpressions returns its type.
--
-- TODO: Consider more subtypes of Expression!
helper context OCL!OclExpression def: allUsages(subExpr : OCL!OclExpression) : Set(TYP!CClass) = 
	Set { };
helper context OCL!PropertyCallExp def: allUsages(subExpr : OCL!OclExpression) : Set(TYP!CClass) = 
	if thisModule.comp.isSameExpr(self.source, subExpr) then
		let c : TYP!CClass = thisModule.typ.accessType(self) in
		if c <> OclUndefined then
			Set { c }
		else
			Set { }
		endif	
	else
		Set { }
	endif;
	
helper context OCL!BinaryOperatorCallExp def: allUsages(subExpr : OCL!OclExpression) : Set(TYP!CClass) = 
	self.source.allUsages(subExpr)->union(if self.argument.oclIsUndefined() then 
		Sequence {} 
	else
		self.argument.allUsages(subExpr)
	endif);
	
helper context OCL!OperationCallExp def: allUsages(subExpr : OCL!OclExpression) : Set(TYP!CClass) = 
	self.source.allUsages(subExpr)->union(self.arguments->collect(a | a.allUsages(subExpr))->flatten());

helper context OCL!IteratorExp def: allUsages(subExpr : OCL!OclExpression) : Set(TYP!CClass) = 
	self.source.allUsages(subExpr)->union(self.body.allUsages(subExpr));

	
helper def: checkUnshortCondition(outerExpP : OCL!OclExpression, inner : OCL!OclExpression) : Boolean = 
	outerExpP.getOperationCalls()->forAll(outerExp |	
		let outer: TupleType(source : OCL!OclExpression, type : TYP!CClass) = outerExp.kindOfType() 
		in if outer <> OclUndefined then
			let innerUsages : Set(TYP!CClass) = inner.allUsages(outer.source) 
			in innerUsages->forAll(c | c = outer.type or outer.type.allSuperClasses->includes(c) )
		   else false endif	
	);

helper context OCL!OclExpression def: getOperationCalls() : Set(OCL!OclExpression) = Set { };
helper context OCL!OperationCallExp def: getOperationCalls() : Set(OCL!OclExpression) = 
	if self.name = 'oclIsKindOf' then
		Set { self }
	else
		Set { }
	endif;
helper context OCL!PropertyCallExp def: getOperationCalls() : Set(OCL!OclExpression) = self.source.getOperationCalls();
helper context OCL!BinaryOperatorCallExp def: getOperationCalls() : Set(OCL!OclExpression) = 
	-- FIXME: This is to prevent a bug in the adapter from BinaryOperatorCallExp => OperatorCallExp
	if self.argument.oclIsUndefined() then
		self.source.getOperationCalls()
	else
		self.source.getOperationCalls()->union(self.argument.getOperationCalls())
	endif;


helper context OCL!IfExp def: simpleUnshortCondition() : Boolean = 
		if self.elseExpression.oclIsKindOf(OCL!IfExp) or self.thenExpression.oclIsKindOf(OCL!IfExp) then
			false
		else
			
			
		if thisModule.checkUnshortCondition(self.condition, self.thenExpression) 
			-- The other case is not to have any kind of checking (oclIsKind, OclUndefined, etc.)
			or (not self.condition.hasShortThing())
		then
			self.elseExpression.isBooleanExpr(true) or self.elseExpression.isBooleanExpr(false) 
		else
			false
		endif endif;


--
-- if <c1> then 
--      <bt1>
-- else
--      true   => unshort(c1, bt1)
-- endif
--
-- @ignore invalid-assignment-imperative-binding
rule unshortCircuit_simple {
	from i : OCL!IfExp (
		if i.simpleUnshortCondition() then
			not (i.unshortCircuit_or_other_case_Condition() or i.unshortCircuitCondition())
		else
			false
		endif
	)
	to c : ACT!CompositeAction (
			actions <- Sequence { a, s4, s5 }
	   ),	
	   a : ACT!Replace, 
	   s4 : ACT!"SetP", s5 : ACT!"SetP",
		-- Should be BinaryOperator??
	   r : OCLt!OperatorCallExp (
			name <- if i.elseExpression.isBooleanExpr(true) then 'implies' else 'and' endif
	   )	   
	do {
		c.source <- i;
		
		s4.source <- r;
		s5.source <- r;
		
		s4.value <- i.condition;
		s5.value <- i.thenExpression;
		
		s4.propertyName <- 'source';
		s5.propertyName <- 'arguments';
		
		a.source <- i;
		a.target <- r;
	}
}


--
-- if <c1> then 
--    if <c2> then
--      <bt2>
--    else
--      <bf2>
--    endif
-- else 
--    <bf1>  =====> if unshort(c1, c2) && same(bf2, bf1) merge <c1> and <c2>
-- endif
--
--
--
-- @ignore invalid-assignment-imperative-binding
rule unshortCircuit {
	from i : OCL!IfExp (
		i.unshortCircuitCondition() 
	)
	to c : ACT!CompositeAction (
			actions <- Sequence { a, s1, s2, s3, s4, s5 }
	   ),	
	   a : ACT!Replace, 
	   s1 : ACT!"SetP", s2 : ACT!"SetP", s3 : ACT!"SetP", s4 : ACT!"SetP", s5 : ACT!"SetP",
		-- Should be BinaryOperator??
	   r : OCLt!OperatorCallExp (
			name <- 'and'
	   ),
	   newIf : OCLt!IfExp (
			--s1: -- condition <- r
			--, AnATLyzer should raise an invalid assignment error!
			--s2: --thenExpression <- i.thenExpression.thenExpression,
			--s3: --elseExpression <- i.thenExpression.elseExpression
	   )
	do {
		c.source <- i;
		
		s1.source <- newIf;
		s2.source <- newIf;
		s3.source <- newIf;
		
		s1.value <- r;
		s2.value <- i.thenExpression.thenExpression;
		s3.value <- i.thenExpression.elseExpression;

		s1.propertyName <- 'condition';
		s2.propertyName <- 'thenExpression';
		s3.propertyName <- 'elseExpression';
		
		
		-- s4 -- r.source <- i.condition;
		-- s5 -- r.arguments <- i.thenExpression.condition;
		s4.source <- r;
		s5.source <- r;
		
		s4.value <- i.condition;
		s5.value <- i.thenExpression.condition;
		
		s4.propertyName <- 'source';
		s5.propertyName <- 'arguments';
		
		a.source <- i;
		a.target <- newIf;
	}
}

helper context OCL!IfExp def: unshortCircuitCondition() : Boolean = 
	if self.thenExpression.oclIsKindOf(OCL!IfExp) then
			
			if thisModule.checkUnshortCondition(self.condition, self.thenExpression.condition) 
				-- The other case is not to have any kind of checking (oclIsKind, OclUndefined, etc.)
				or (not self.condition.hasShortThing())
			then
				thisModule.comp.isSameExpr(self.elseExpression, self.thenExpression.elseExpression)
			else
				false
			endif
		else
			false
		endif;


-- OR version

--
-- if cond-1 else
--    <exp-1>
-- else
--     if cond-2 then 
--         <exp-2>            ===> <exp-1> equals <exp-2>
--     else
--         
--     endif
-- endif
--
rule unshortCircuit_or {
	from i : OCL!IfExp (
		if i.elseExpression.oclIsKindOf(OCL!IfExp) then
			if thisModule.checkUnshortCondition(i.condition, i.elseExpression.condition) 
				-- The other case is not to have any kind of checking (oclIsKind, OclUndefined, etc.)
				or (not i.condition.hasShortThing())
			then
				thisModule.comp.isSameExpr(i.thenExpression, i.elseExpression.thenExpression)
			else
				false
			endif
		else
			false
		endif 
	)
	to c : ACT!CompositeAction (
			actions <- Sequence { a, s1, s2, s3, s4, s5 }
	   ),	
	   a : ACT!Replace, 
	   s1 : ACT!"SetP", s2 : ACT!"SetP", s3 : ACT!"SetP", s4 : ACT!"SetP", s5 : ACT!"SetP",
		-- Should be BinaryOperator??
	   r : OCLt!OperatorCallExp (
			name <- 'or'
	   ),
	   newIf : OCLt!IfExp (
			--s1: -- condition <- r
			--, AnATLyzer should raise an invalid assignment error!
			--s2: --thenExpression <- i.thenExpression.thenExpression,
			--s3: --elseExpression <- i.thenExpression.elseExpression
	   )
	do {
		c.source <- i;
		
		s1.source <- newIf;
		s2.source <- newIf;
		s3.source <- newIf;
		
		s1.value <- r;
		s2.value <- i.elseExpression.thenExpression;
		s3.value <- i.elseExpression.elseExpression;

		s1.propertyName <- 'condition';
		s2.propertyName <- 'thenExpression';
		s3.propertyName <- 'elseExpression';
		
		
		-- s4 -- r.source <- i.condition;
		-- s5 -- r.arguments <- i.thenExpression.condition;
		s4.source <- r;
		s5.source <- r;
		
		s4.value <- i.condition;
		s5.value <- i.elseExpression.condition;
		
		s4.propertyName <- 'source';
		s5.propertyName <- 'arguments';
		
		a.source <- i;
		a.target <- newIf;
	}
}


helper context OCL!IfExp def: simplyEnoughToInline() : Boolean = false;
helper context OCL!LetExp def: simplyEnoughToInline() : Boolean = false;
helper context OCL!OclExpression def: simplyEnoughToInline() : Boolean = true;

-- Deals with the case:
-- if exp then
--    true
-- else            
--    exp2 
-- endif
--
-- ==> exp or exp2
--  
-- when short circuit is not needed for exp2
--
--
-- @ignore invalid-assignment-imperative-binding
rule unshortCircuit_or_other_case {
	from i : OCL!IfExp (
		i.unshortCircuit_or_other_case_Condition() 
	)
	to c : ACT!CompositeAction (
			actions <- Sequence { s4, s5, a }
	   ),	
	   a : ACT!Replace, 
	   s4 : ACT!"SetP", s5 : ACT!"SetP",
		-- Should be BinaryOperator??
	   r : OCLt!OperatorCallExp (
			name <- 'or'
	   )
	do {
		c.source <- i;
		c.rule = 'unshortCircuit_or_other_case';
		
		s4.source <- r;
		s5.source <- r;
		
		s4.value <- i.condition;
		s5.value <- i.elseExpression;
		
		s4.propertyName <- 'source';
		s5.propertyName <- 'arguments';
		
		a.source <- i;
		a.target <- r;
	}
}

helper context OCL!IfExp def: unshortCircuit_or_other_case_Condition() : Boolean = 
	
		if self.thenExpression.isBooleanExpr(true) and self.elseExpression.simplyEnoughToInline() then
			-- This is to avoid a potential rule conflict with rule simple_unshort
			thisModule.checkUnshortCondition(self.condition, self.elseExpression) 
				-- The other case is not to have any kind of checking (oclIsKind, OclUndefined, etc.)
				or (not self.condition.hasShortThing())			
		else
			false
		endif;




