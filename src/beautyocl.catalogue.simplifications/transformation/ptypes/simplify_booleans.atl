-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCLt=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore

module "simplify_booleans";
create OUT : ACT, OUT2 : OCLt from IN : OCL; 

helper def : relationalOps : Set(String) = Set { '=', '<>', 'implies', 'and', 'or', 'xor' };

--
-- A binary, relational operation with two boolean operands
-- can be simplified to a boolean value
--
rule binaryBooleanRelational {
	from o : OCL!BinaryOperatorCallExp (
		o.source.oclIsKindOf(OCL!BooleanExp) and
		o.argument.oclIsKindOf(OCL!BooleanExp) and
		thisModule.relationalOps->includes(o.name)
	)
	to a : ACT!Replace,
	   r : OCLt!BooleanExp (
		booleanSymbol <- 
			if o.name = 'implies' then o.source.booleanSymbol implies o.argument.booleanSymbol 
			else if o.name = '<>' then o.source.booleanSymbol <> o.argument.booleanSymbol
			else if o.name = 'and' then o.source.booleanSymbol and o.argument.booleanSymbol		
			else if o.name = 'or' then o.source.booleanSymbol or o.argument.booleanSymbol
			else if o.name = 'xor' then o.source.booleanSymbol xor o.argument.booleanSymbol			
			else o.source.booleanSymbol = o.argument.booleanSymbol endif endif endif endif endif
		)
	do {
		a.source <- o;
		a.target <- r;
	}
}

--
-- A unary operation with a boolean literal
-- can be simplified to a boolean value
--
rule unaryBoolean {
	from o : OCL!UnaryOperatorCallExp (
		o.source.oclIsKindOf(OCL!BooleanExp) and
		o.name = 'not'
	)
	to a : ACT!Replace,
	   r : OCLt!BooleanExp (
		  booleanSymbol <- not o.source.booleanSymbol 
	   )
	do {
		a.source <- o;
		a.target <- r;
	}
}
