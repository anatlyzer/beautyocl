
-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCLt=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore
-- @path COMP=/beautyocl.catalogue.simplifications/metamodels/comparison.ecore

-- Deals with cases like:
--    if exp then exp else true endif => true
--    if exp then exp else false endif => exp
--
module "if_same_expr";
create OUT : ACT, OUT2 : OCLt from IN : OCL, IN3 : COMP; 

helper def : comp : COMP!ExprComparator = COMP!ExprComparator.allInstances()->first();

helper context OCL!BooleanExp    def: isBooleanExpr(b : Boolean) : Boolean = self.booleanSymbol = b;
helper context OCL!OclExpression def: isBooleanExpr(b : Boolean) : Boolean = false;

--
-- if exp then exp else true endif => true
--
rule removeIfThenExprElseTrue {
	from i : OCL!IfExp (
		thisModule.comp.isSameExpr(i.condition, i.thenExpression) and i.elseExpression.isBooleanExpr(true)
	)
	to a : ACT!Replace,
	   r : OCLt!BooleanExp (
			booleanSymbol <- true 
	   )
	do {
		a.source <- i;
		a.target <- r;
	}
}

rule replacleByThen {
	from i : OCL!IfExp (
		thisModule.comp.isSameExpr(i.condition, i.thenExpression) and i.elseExpression.isBooleanExpr(false)
	)
	to a : ACT!DeleteMoveChildren
	do {
		a.source <- i;
		a.children <- i.thenExpression;
	}
}

rule replacleWhenBranchesEqual {
	from i : OCL!IfExp (
		thisModule.comp.isSameExpr(i.thenExpression, i.elseExpression)
	)
	to a : ACT!DeleteMoveChildren
	do {
		a.source <- i;
		a.children <- i.thenExpression;
	}
}
