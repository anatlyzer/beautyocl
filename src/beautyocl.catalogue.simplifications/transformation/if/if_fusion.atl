
-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCLt=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore
-- @path COMP=/beautyocl.catalogue.simplifications/metamodels/comparison.ecore

-- Deals with cases like:
--    if exp then exp else true endif => true
--    if exp then exp else false endif => exp
--
module "if_same_expr";
create OUT : ACT, OUT2 : OCLt from IN : OCL, IN3 : COMP; 

helper def : comp : COMP!ExprComparator = COMP!ExprComparator.allInstances()->first();

helper context OCL!BooleanExp    def: isBooleanExpr(b : Boolean) : Boolean = self.booleanSymbol = b;
helper context OCL!OclExpression def: isBooleanExpr(b : Boolean) : Boolean = false;

--
-- if exp then exp else true endif => true
--
rule fuseIf {
	from i : OCL!BinaryOperatorCallExp (
		-- TODO: Fix the issue with __filter
		if i.argument.oclIsUndefined() then false else 
			if i.source.oclIsKindOf(OCL!IfExp) and i.argument.oclIsKindOf(OCL!IfExp) then
				thisModule.comp.isSameExpr(i.source.condition, i.argument.condition)
			else 
				false
			endif
		
		endif
	)
	to c : ACT!CompositeAction (
			actions <- Sequence { r2, r3, s1, s2, s3, s4, mov }
	   ),
	   mov : ACT!DeleteMoveChildren, r2 : ACT!Replace, r3 : ACT!Replace,
--	   op1 : OCLt!BinaryOperatorCallExp ( name <- i.name ),
--	   op2 : OCLt!BinaryOperatorCallExp ( name <- i.name ),
	   op1 : OCLt!OperatorCallExp ( name <- i.name ),
	   op2 : OCLt!OperatorCallExp ( name <- i.name ),

		s1 : ACT!SetP, s2 : ACT!SetP, s3 : ACT!SetP, s4 : ACT!SetP
	do {
		c.source <- i;
		
		mov.source <- i;
		mov.children <- i.source;

		r2.source <- i.source.thenExpression;
		r2.target <- op1;
		
		r3.source <- i.source.elseExpression;
		r3.target <- op2;
		
		-- op1.source = i.thenExpression
		s1.source <- op1; 
		s1.propertyName <- 'source';
		s1.value <- i.source.thenExpression;

		-- op2.source = i.elseExpression
		s2.source <- op2; 
		s2.propertyName <- 'source';
		s2.value <- i.source.elseExpression;

		-- op1.arguments = i.thenExpression
		s3.source <- op1; 
		s3.propertyName <- 'arguments';
		s3.value <- i.argument.thenExpression;

		-- op2.arguments = i.elseExpression
		s4.source <- op2; 
		s4.propertyName <- 'arguments';
		s4.value <- i.argument.elseExpression;
	
	
	}
}

