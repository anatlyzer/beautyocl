
-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCL2=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore

-- Given:
--  if x then y else z endif > 0 => if x then y > 0 else z > 0
--
module "introduce_call";
create OUT : ACT, OUT2 : OCL2 from IN : OCL; 


helper context OCL!OclExpression def: isComplexInlining() : Boolean = false;
helper context OCL!OperationCallExp def: isComplexInlining() : Boolean = 
	self.arguments->exists(a | a.oclIsKindOf(OCL!IfExp));

-- @ignore invalid-assignment-imperative-binding
rule convert {
	from o : OCL!PropertyCallExp (
		o.source.oclIsKindOf(OCL!IfExp) and o.isComplexInlining()
		-- TODO: Check args complexity
	)
	to c1 : ACT!Clone (		
		ignoredProperties <- Sequence { 'source' }	
	),
	c2 : ACT!Clone (		
		ignoredProperties <- Sequence { 'source' }	
	),
	c3 : ACT!Clone,
	c4 : ACT!Clone,
	r1 : ACT!Replace,
	r2 : ACT!Replace,
	m : ACT!DeleteMoveChildren,
	comp : ACT!CompositeAction (
		actions <- Sequence { c3, c4, c1, c2, r1, r2, m }	
	)
	do {
		c1.source <- o;
		c2.source <- o;
		c1.values <- Sequence { c3 };
		c2.values <- Sequence { c4 };
		
		c3.source <- o.source.thenExpression;
		c4.source <- o.source.elseExpression;		
		
		r1.source <- o.source.thenExpression;
		r1.target <- c1;
		r2.source <- o.source.elseExpression;
		r2.target <- c2;
		
		m.source <- o;
		m.children <- o.source;
		
		comp.source <- o; -- This is needed for scope calculation
	}
}

