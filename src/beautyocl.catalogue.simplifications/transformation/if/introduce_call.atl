
-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCL2=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore

-- Given:
--  if x then y else z endif > 0 => if x then y > 0 else z > 0
--
module "introduce_call";
create OUT : ACT, OUT2 : OCL2 from IN : OCL; 


helper context OCL!OclExpression def: isComplexInlining(ignore : Set(OCL!OclExpression)) : Boolean = false;

helper context OCL!OperationCallExp def: isComplexInlining(ignore : Set(OCL!OclExpression)) : Boolean = 
	self.arguments->exists(a | if ignore->excludes(a) then a.isComplexInlining(ignore->including(a)) else false endif)
	or
	if ignore->excludes(self.source) then self.source.isComplexInlining(ignore->including(self.source)) else false endif;
		
	
helper context OCL!OperatorCallExp def: isComplexInlining(ignore : Set(OCL!OclExpression)) : Boolean = 
-- TODO: This seems to make AnATLyzer crash...
--	if self.argument.oclIsUndefined() then 
--		false 
--	else 
--		(ignore->excludes(self.argument) implies self.argument.isComplexInlining(ignore->including(self.argument)))
--	endif
--	or
	if self.argument.oclIsUndefined() then 
		false
	else
		if ignore->excludes(self.argument) then self.argument.isComplexInlining(ignore->including(self.argument)) else false endif
	endif
	or	
	if ignore->excludes(self.source) then self.source.isComplexInlining(ignore->including(self.source)) else false endif;

helper context OCL!IfExp def: isComplexInlining(ignore : Set(OCL!OclExpression)) : Boolean = true;

helper context OCL!IteratorExp def: isComplexInlining(ignore : Set(OCL!OclExpression)) : Boolean = 
	if ignore->excludes(self.body) then self.body.isComplexInlining(ignore->including(self.body)) else false endif
	or
	if ignore->excludes(self.source) then self.source.isComplexInlining(ignore->including(self.source)) else false endif;


rule convert {
	from o : OCL!PropertyCallExp (
		-- TODO: This is to avoid conflicts in the bindings. Should be handled differently in the binding, but there seems to be a bug
		( not o.oclIsKindOf(OCL!OperatorCallExp) ) and
		
		if o.source.oclIsKindOf(OCL!IfExp) then 
			not o.isComplexInlining(Set { o.source })
		else
			false
		endif
			
	)
	to c1 : ACT!Clone (		
		ignoredProperties <- Sequence { 'source' }	
	),
	c2 : ACT!Clone (		
		ignoredProperties <- Sequence { 'source' }	
	),
	c3 : ACT!Clone,
	c4 : ACT!Clone,
	r1 : ACT!Replace,
	r2 : ACT!Replace,
	m : ACT!DeleteMoveChildren,
	comp : ACT!CompositeAction (
		actions <- Sequence { c3, c4, c1, c2, r1, r2, m }	
	)
	do {
		c1.source <- o;
		c2.source <- o;
		c1.values <- Sequence { c3 };
		c2.values <- Sequence { c4 };
		
		c3.source <- o.source.thenExpression;
		c4.source <- o.source.elseExpression;		
		
		r1.source <- o.source.thenExpression;
		r1.target <- c1;
		r2.source <- o.source.elseExpression;
		r2.target <- c2;
		
		m.source <- o;
		m.children <- o.source;
		
		comp.source <- o; -- This is needed for scope calculation
	}
}


rule convertOperator {
	from o : OCL!BinaryOperatorCallExp (
		if o.source.oclIsKindOf(OCL!IfExp) then
			not o.isComplexInlining(Set { o.source })
		else
			false	
		endif
		
	)
	to c1 : ACT!Clone (		
		ignoredProperties <- Sequence { 'source' }	
	),
	c2 : ACT!Clone (		
		ignoredProperties <- Sequence { 'source' }	
	),
	c3 : ACT!Clone,
	c4 : ACT!Clone,
	r1 : ACT!Replace,
	r2 : ACT!Replace,
	m : ACT!DeleteMoveChildren,
	comp : ACT!CompositeAction (
		actions <- Sequence { c3, c4, c1, c2, r1, r2, m }	
	)
	do {
		c1.source <- o;
		c2.source <- o;
		c1.values <- Sequence { c3 };
		c2.values <- Sequence { c4 };
		
		c3.source <- o.source.thenExpression;
		c4.source <- o.source.elseExpression;		
		
		r1.source <- o.source.thenExpression;
		r1.target <- c1;
		r2.source <- o.source.elseExpression;
		r2.target <- c2;
		
		m.source <- o;
		m.children <- o.source;
		
		comp.source <- o; -- This is needed for scope calculation
	}
}
