-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCLt=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path TYP=/beautyocl.catalogue.simplifications/metamodels/typing.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore

-- @Xpre OCL!OperationCallExp.allInstances()->forAll(op | op.name = 'oclIsKindOf' implies self.arguments->size() = 1 )

module "simplify_kindof_true";
create OUT : ACT, OUT2 : OCLt from IN : OCL, IN2 : TYP; 

helper def : typ : TYP!ExprTyping = TYP!ExprTyping.allInstances()->first();

helper context OCL!OclExpression def: isKindOf() : Boolean = false;

-- @ignore undefined-value
helper context OCL!OperationCallExp def: isKindOf() : Boolean = 
	if self.name = 'oclIsKindOf' then
		thisModule.typ.isSameType(self.source, self.arguments->first()) 
		or 
		-- To simplify: b.oclIsKindOf(A) when A is a supertype of B
		thisModule.typ.isSuperType(self.source, self.arguments->first()) 
	else
		false
	endif;

rule toTrue {
	from o : OCL!OperationCallExp (
		o.isKindOf()
	)
	to a : ACT!Replace,
	   r : OCLt!BooleanExp (
		 	booleanSymbol <- true
	   )
	do {
		a.source <- o;
		a.target <- r;
	}
}

