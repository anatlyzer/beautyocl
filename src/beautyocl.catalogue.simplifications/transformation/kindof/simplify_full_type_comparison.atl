-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCL2=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path TYP=/beautyocl.catalogue.simplifications/metamodels/typing.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore

-- This simplification identifies a chain of "or" expressions
-- checking the type of same source variable with oclIsKindOf.
-- If the chain covers all the subtypes of a type, it is substituted by the type.
-- <pre>
--    v.oclIsKindOf(A) or v.oclIsKindOf(B) or v.oclIsKindOf(C) => or v.oclIsKindOf(SuperTypeOfABC)
-- </pre>
--
-- The following pre-conditions holds:
-- 		OCL!OperationCallExp.allInstances()->forAll(op | op.name = 'oclIsKindOf' implies self.arguments->size() = 1 )
--
module "simplify_full_type_comparison";
create OUT : ACT, OUT2 : OCL2 from IN : OCL, IN2 : TYP; 

helper context OclAny def: oclAsType(t : OCL!"OclType") : OclAny = self;

helper def : typ : TYP!ExprTyping = TYP!ExprTyping.allInstances()->first();

-- helper def : subclasses : Map(TYP!CClass, Set(TYP!CClass)) =
helper def : subclassesMap : Map(OclAny, Set(TYP!CClass)) =
	TYP!CClass.allInstances()->iterate(it; tmp: Map(TYP!CClass, Set(TYP!CClass)) = Map {} |
		tmp.including(it, TYP!CClass.allInstances()->select(maySubclass | maySubclass.superClasses->includes(it) )->asSet())
	);

helper context TYP!CClass def: subclasses : Set(TYP!CClass) = thisModule.subclassesMap.get(self);
helper context TYP!CClass def: allSubclasses : Set(TYP!CClass) = 
	self.subclasses->union(self.subclasses-> collect(c | c.subclasses)->flatten());

helper context TYP!CClass def: isCoveredBy(types : Set(TYP!CClass)) : Boolean =
	if types->includes(self) then
		true 
	else 
		self.subclasses->notEmpty() and self.subclasses->forAll(c | c.isCoveredBy(types))
	endif
	;

helper  def: findSuperType(param : Set(OCL!"OclType")) : TYP!CClass = 
	-- Sort all classes by number of subclasses
	let  types: Set(TYP!CClass) = param->collect(t | thisModule.typ.typeOf(t))->asSet() in -- assume is a CClass...
	-- let sorted:  OclAny = TYP!CClass.allInstances()->sortedBy(c | c.allSubclasses->size())
	
	-- We only consider the set of common superclasses
	let superclasses : Set(TYP!CClass) =
		types->iterate(it; res: Set(TYP!CClass) = types->asSequence()->first().superClasses->asSet() | res->intersection(it.superClasses))
	in let sorted:  OclAny = types->collect(c | superclasses->select(s | s.abstract))->flatten()->asSet()->sortedBy(c | c.allSubclasses->size())
	in sorted->iterate(it; res: TYP!CClass = OclUndefined | 
		if res.oclIsUndefined() then
			if it.isCoveredBy(types) then
				it
			else
				OclUndefined
			endif
		else
			res
		endif
	)
;


-- @force-declared-return-type
-- @ignore found-in-subtype 
--         because isOrKindOf already checks that it is either BinaryOp or OperationCallExp
helper context OCL!BinaryOperatorCallExp def: orKindOfCheckedTypes : Set(OCL!"OclType") =
	self.source.orKindOfCheckedTypes->union(self.argument.orKindOfCheckedTypes);

helper context OCL!OperationCallExp def: orKindOfCheckedTypes : Set(OCL!"OclType") = 
	if self.name = 'oclIsKindOf' then
		Set { self.arguments->first().oclAsType(OCL!"OclType") }
	else
		Set { }
	endif;
	
-- Needed to avoid runtime problems...
helper context OCL!OclExpression def: orKindOfCheckedTypes : Set(OCL!"OclType") = Set { };


--helper context OCL!OperationCallExp def: isKindOf() : Set(OCL!"OclType") =
--	Set { self.arguments->first().oclAsType(OCL!"OclType") };

-- isOrKindOf
helper context OCL!OclExpression         def: isOrKindOf : Boolean = false;
helper context OCL!OperationCallExp      def: isOrKindOf : Boolean =
	self.name = 'oclIsKindOf';
helper context OCL!BinaryOperatorCallExp def: isOrKindOf : Boolean =
	-- This check is needed because there is a bug in the adaptation
	-- e.g. for ATL o.BinaryOperatorCallExp__filter__ is not called in the
	-- corresponding rule filter (should not assume short-circuit)
	if self.argument.oclIsUndefined() then 
		false
	else 
		self.name = 'or' and self.source.isOrKindOf and self.argument.isOrKindOf
	endif
	;
	--	if self.name = 'or' then
--		self.source.isOrKindOf and self.argument.isOrKindOf
--	else
--		false
--	endif;
	
-- sameSource
helper context OCL!OclExpression def: getSameSource(exp : OCL!OclExpression) : OCL!VariableDeclaration = OclUndefined;

helper context OCL!VariableExp def: getSameSource(exp : OCL!OclExpression) : OCL!VariableDeclaration =
	if exp.oclIsKindOf(OCL!VariableExp) then 
		if self.varDcl = exp.varDcl then
			self.varDcl
		else
			OclUndefined
		endif
	else
		exp.getSameSource(self)
	endif;
	
helper context OCL!OperationCallExp def: getSameSource(exp : OCL!OclExpression) : OCL!VariableDeclaration =
	if self.name = 'oclIsKindOf' then
		self.source.getSameSource(exp)
	else
		OclUndefined
	endif;

helper context OCL!BinaryOperatorCallExp def: getSameSource(exp : OCL!OclExpression) : OCL!VariableDeclaration =
	self.source.getSameSource(exp);
	
helper context OCL!BinaryOperatorCallExp def: commonVar : OCL!VariableDeclaration =
	if self.arguments->size() = 1 then
		self.source.getSameSource(self.argument)
	else
		OclUndefined
	endif;

helper context OCL!BinaryOperatorCallExp def: parentIsNotOrKindOf : Boolean =
	if self.refImmediateComposite().oclIsKindOf(OCL!OclExpression) then
		not self.refImmediateComposite().isOrKindOf
	else
		true
	endif;


rule removeIf {
	from o : OCL!BinaryOperatorCallExp (
		-- TODO: Check they all have the same source expression
		if o.isOrKindOf and o.commonVar <> OclUndefined and o.parentIsNotOrKindOf then
			--o.commonVar.type <> OclUndefined -- Not sure about this condition... type is always <> null??? 
			--and
			thisModule.findSuperType(o.orKindOfCheckedTypes) <> OclUndefined
			and
			thisModule.typ.modelName(o.commonVar) <> OclUndefined -- Make sure I can grab a model name
		else
			false
		endif
	)
	using {
		sup : TYP!CClass = thisModule.findSuperType(o.orKindOfCheckedTypes);
	}
	to a : ACT!Replace,
	  op : OCL2!OperationCallExp (
		name <- 'oclIsKindOf',
		source <- vref,
		arguments <- p
	  ),
	  vref : OCL2!VariableExp (
	  	varDcl <- o.commonVar
	  )
	  ,
	  p : OCL2!OclModelElement (
		name <- sup.name,
		model <- m
	  )
	  ,
	  m : OCL2!OclModel (
		name <- thisModule.typ.modelName(o.commonVar) --.type.model.name
	)
	  
	do {
		a.source <- o;
		a.target <- op;
	}
 
}

