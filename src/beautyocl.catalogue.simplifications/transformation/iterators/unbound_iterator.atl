-- @path OCL=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path OCLt=/beautyocl.catalogue.simplifications/metamodels/superimposed.ecore
-- @path ACT=/beautyocl.actions/model/actions.ecore
-- @path COMP=/beautyocl.catalogue.simplifications/metamodels/comparison.ecore
-- @path TYP=/beautyocl.catalogue.simplifications/metamodels/typing.ecore

-- 
-- XML!Element.allInstances()->forAll(i | XML!Element.allInstances()->forAll(d | not i.parent.oclIsUndefined()));
-- 
-- => 
--
-- XML!Element.allInstances()->forAll(i | not i.parent.oclIsUndefined());
--
-- because d is not referred to in the body of the forAll

module "unbounditerator";
create OUT : ACT, OUT2 : OCLt from IN : OCL, IN2 : TYP, IN3 : COMP; 

helper def : comp : COMP!ExprComparator = COMP!ExprComparator.allInstances()->first();
helper def : typ  : TYP!ExprTyping = TYP!ExprTyping.allInstances()->first();

helper context OclAny def: oclAsType(t : OCL!"OclType") : OclAny = self;

helper context OCL!OclExpression def: isSimpleExpression() : Boolean = true;
helper context OCL!OperationCallExp def: isSimpleExpression() : Boolean = 
	not self.arguments->exists(a | a.oclIsKindOf(OCL!IfExp));
helper context OCL!OperatorCallExp def: isSimpleExpression() : Boolean = 
	not (self.source.oclIsKindOf(OCL!IfExp) or self.arguments.oclIsKindOf(OCL!IfExp));


-- @lib find-ocurrences
helper context OCL!OclExpression def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = Set { };
helper context OCL!VariableExp def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = 
	if self.varDcl = v then Set { self } else Set { } endif;

helper context OCL!PropertyCallExp def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = 
	self.source.findOcurrences(v);

helper context OCL!NavigationCallExp def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = 
	self.source.findOcurrences(v);

helper context OCL!OperationCallExp def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = 
	self.source.findOcurrences(v)->union(self.arguments->collect(a | a.findOcurrences(v)))->flatten();

helper context OCL!OperatorCallExp def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = 
	self.source.findOcurrences(v)->union(self.arguments->collect(a | a.findOcurrences(v)))->flatten();

helper context OCL!IfExp def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = 
	self.condition.findOcurrences(v)->
		union(self.thenExpression.findOcurrences(v))->
		union(self.elseExpression.findOcurrences(v))->
		flatten();

helper context OCL!IteratorExp def: findOcurrences(v : OCL!VariableDeclaration) : Set(OCL!VariableExp) = 
	self.source.findOcurrences(v)->
		union(self.body.findOcurrences(v))->
		flatten();

-- @end-of find-ocurrences
	

-- @ignore invalid-assignment-imperative-binding
rule unboundIterator {
	from i : OCL!IteratorExp (
		if Set { 'forAll', 'exists' }->includes(i.name) then
			i.body.findOcurrences(i.iteratorVar)->isEmpty()  
		else
			false
		endif
	)
	to 	
	   mov : ACT!DeleteMoveChildren
	do {
		mov.source <- i;
		mov.children <- i.body;
	}
}

-- TODO: Implement the select variant